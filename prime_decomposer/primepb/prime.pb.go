// Code generated by protoc-gen-go. DO NOT EDIT.
// source: primepb/prime.proto

package primepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrimeRequest struct {
	Input                int32    `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeRequest) Reset()         { *m = PrimeRequest{} }
func (m *PrimeRequest) String() string { return proto.CompactTextString(m) }
func (*PrimeRequest) ProtoMessage()    {}
func (*PrimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2e40e68d59adc, []int{0}
}

func (m *PrimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeRequest.Unmarshal(m, b)
}
func (m *PrimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeRequest.Marshal(b, m, deterministic)
}
func (m *PrimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeRequest.Merge(m, src)
}
func (m *PrimeRequest) XXX_Size() int {
	return xxx_messageInfo_PrimeRequest.Size(m)
}
func (m *PrimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeRequest proto.InternalMessageInfo

func (m *PrimeRequest) GetInput() int32 {
	if m != nil {
		return m.Input
	}
	return 0
}

type PrimeResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeResponse) Reset()         { *m = PrimeResponse{} }
func (m *PrimeResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeResponse) ProtoMessage()    {}
func (*PrimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c2e40e68d59adc, []int{1}
}

func (m *PrimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeResponse.Unmarshal(m, b)
}
func (m *PrimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeResponse.Marshal(b, m, deterministic)
}
func (m *PrimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeResponse.Merge(m, src)
}
func (m *PrimeResponse) XXX_Size() int {
	return xxx_messageInfo_PrimeResponse.Size(m)
}
func (m *PrimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeResponse proto.InternalMessageInfo

func (m *PrimeResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*PrimeRequest)(nil), "PrimeRequest")
	proto.RegisterType((*PrimeResponse)(nil), "PrimeResponse")
}

func init() { proto.RegisterFile("primepb/prime.proto", fileDescriptor_54c2e40e68d59adc) }

var fileDescriptor_54c2e40e68d59adc = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0xcc,
	0x4d, 0x2d, 0x48, 0xd2, 0x07, 0xd3, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x4a, 0x2a, 0x5c, 0x3c,
	0x01, 0x20, 0x6e, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e,
	0x41, 0x69, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xa3, 0xa4, 0xce, 0xc5, 0x0b,
	0x55, 0x55, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc6, 0xc5, 0x56, 0x94, 0x5a, 0x5c, 0x9a,
	0x03, 0x53, 0x07, 0xe5, 0x19, 0xd9, 0x73, 0xf1, 0x83, 0x15, 0xba, 0xa4, 0x26, 0xe7, 0xe7, 0x16,
	0xe4, 0x17, 0xa7, 0x16, 0x09, 0xe9, 0x70, 0x71, 0xc2, 0x79, 0x42, 0xbc, 0x7a, 0xc8, 0xb6, 0x49,
	0xf1, 0xe9, 0xa1, 0x18, 0x6b, 0xc0, 0xe8, 0xc4, 0x19, 0xc5, 0x0e, 0x75, 0x66, 0x12, 0x1b, 0xd8,
	0x85, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x24, 0x72, 0x76, 0xb8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrimeDecomposerClient is the client API for PrimeDecomposer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrimeDecomposerClient interface {
	Decompose(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeDecomposer_DecomposeClient, error)
}

type primeDecomposerClient struct {
	cc *grpc.ClientConn
}

func NewPrimeDecomposerClient(cc *grpc.ClientConn) PrimeDecomposerClient {
	return &primeDecomposerClient{cc}
}

func (c *primeDecomposerClient) Decompose(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeDecomposer_DecomposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrimeDecomposer_serviceDesc.Streams[0], "/PrimeDecomposer/Decompose", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeDecomposerDecomposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeDecomposer_DecomposeClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type primeDecomposerDecomposeClient struct {
	grpc.ClientStream
}

func (x *primeDecomposerDecomposeClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeDecomposerServer is the server API for PrimeDecomposer service.
type PrimeDecomposerServer interface {
	Decompose(*PrimeRequest, PrimeDecomposer_DecomposeServer) error
}

// UnimplementedPrimeDecomposerServer can be embedded to have forward compatible implementations.
type UnimplementedPrimeDecomposerServer struct {
}

func (*UnimplementedPrimeDecomposerServer) Decompose(req *PrimeRequest, srv PrimeDecomposer_DecomposeServer) error {
	return status.Errorf(codes.Unimplemented, "method Decompose not implemented")
}

func RegisterPrimeDecomposerServer(s *grpc.Server, srv PrimeDecomposerServer) {
	s.RegisterService(&_PrimeDecomposer_serviceDesc, srv)
}

func _PrimeDecomposer_Decompose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeDecomposerServer).Decompose(m, &primeDecomposerDecomposeServer{stream})
}

type PrimeDecomposer_DecomposeServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type primeDecomposerDecomposeServer struct {
	grpc.ServerStream
}

func (x *primeDecomposerDecomposeServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PrimeDecomposer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PrimeDecomposer",
	HandlerType: (*PrimeDecomposerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Decompose",
			Handler:       _PrimeDecomposer_Decompose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "primepb/prime.proto",
}
